#pragma checksum "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\Pago\AbonosPrima.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "62ef3f2f83014031db16a1014148b1d87ca29947"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Pages_Pago_AbonosPrima), @"mvc.1.0.razor-page", @"/Pages/Pago/AbonosPrima.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using DevExtremeAspNetCoreResponsiveApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using Data.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using DevExtremeAspNetCoreResponsiveApp.DTOs;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"62ef3f2f83014031db16a1014148b1d87ca29947", @"/Pages/Pago/AbonosPrima.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9ccded478ea879bcdad98436fdc08a5ed888fec9", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Pago_AbonosPrima : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\Pago\AbonosPrima.cshtml"
  
    ViewData["Title"] = "Registro de Abonos a Primas";

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\Pago\AbonosPrima.cshtml"
Write(Html.DevExtreme().DataGrid<ViewAbonosPrima>
                    ()
                    .ID("GridListado")
                    .DataSource(d=>d.Mvc().Controller("AbonosPrima").Key("IdAbonoPrima")
                    .LoadAction("GetAll")
                    .InsertAction("PostCreate")
                    .UpdateAction("PutUpdate")
                    .DeleteAction("DeletebyId")
                    .OnBeforeSend("grid_dataSource_beforeSend")
                    )
                    .RemoteOperations(r=>r.Paging(true))
                    .ShowBorders(false)
                    .ElementAttr(new { @class = "dx-card wide-card" })
                    .Export(e => e.Enabled(true).AllowExportSelectedData(true)).OnExporting("exporting")
                    .Paging(pag => pag.PageSize(10))
                    .Pager(p => p.ShowPageSizeSelector(false).ShowNavigationButtons(true).ShowInfo(true).InfoText("Página {0} de {1} ({2} Registros)"))
                    .RowAlternationEnabled(true)
                    .HoverStateEnabled(true)
                    .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                    .SearchPanel(s => s.Visible(true).HighlightSearchText(true).Width(400))
                    .FilterRow(f => f.ApplyFilter(GridApplyFilterMode.Auto).Visible(true).ShowAllText("Todo"))
                    .FilterSyncEnabled(true)
                    .WordWrapEnabled(true)
                    .ColumnAutoWidth(true)
                    /*Columnas del grid*/
                    .Columns(columns =>
                    {
                        columns.Add().Type(GridCommandColumnType.Buttons).Buttons(b =>
                        {
                            b.Add().Name(GridColumnButtonName.Edit);
                            b.Add().Name(GridColumnButtonName.Delete);
                            b.Add().Icon("fa fa-print").Hint("Imprimir").OnClick("printTicket");
                        }).Name("Commands");
                        columns.AddFor(m => m.IdAbonoPrima).Visible(false);
                        //columns.AddFor(m => m.Prima);
                        columns.AddFor(m => m.Fecha);
                        columns.AddFor(m => m.Monto).Caption("MontoAbono");
                        columns.Add().CalculateDisplayValue(new JS("displayExp")).Caption("Descripcion").GroupIndex(0).GroupCellTemplate(new JS("groupTemplate"));
                        columns.AddFor(m => m.IdAsignacion).Caption("Asignación").Visible(false).Lookup(look => look
                                                                        .DataSource(d => d.Mvc().Controller("Asignaciones")
                                                                                    .LoadAction("GetAll").Key("IdAsignacion"))
                                                                        //.DisplayExpr("DatoCompleto")                                                                        
                                                                        .ValueExpr("IdAsignacion").DisplayExpr(new JS("groupDisplay")).DataSourceOptions(o => o.Filter("['Estado', '=', 'Vigente']"))
                                                                        )
                                                                        //.GroupIndex(0)
                                                                        //.GroupCellTemplate(new JS("groupTemplate"))
                                                                        .AllowSearch(true).EditorOptions(new
                                                                        {
                                                                            searchExpr = new string[] { "NombreCompleto", "NombreLote" }
                                                                        })



                      ;
                    })
                    .Grouping(g=>g.AutoExpandAll(false))
                    .Summary(s => s.GroupItems(items =>
                    {
                        items.AddFor(m => m.Monto).SummaryType(SummaryType.Sum).ValueFormat(Format.Currency).ValueFormat("currency");
                        items.AddFor(m => m.Prima).SummaryType(SummaryType.Avg).ValueFormat(Format.Currency);
                    }))
                    .HeaderFilter(h => h.AllowSearch(true).Visible(true))
                    /*Configuracion para la edicion*/
                    .Editing(e => e.Mode(GridEditMode.Popup)
                        .UseIcons(true)
                        .AllowAdding(true)
                        .AllowUpdating(true)
                        .AllowDeleting(true)
                        .UseIcons(true)
                        .Texts(t => t.AddRow("Nuevo").EditRow("Editar").DeleteRow("Eliminar").ConfirmDeleteMessage("¿Está seguro que desea Eliminar este Registro?")
                        .SaveRowChanges("Guardar").CancelRowChanges("Cancelar"))
                        /*Configuracion del Popup*/
                        .Popup(p => p.Width(700).Title("Formulario de Edición").ShowTitle(true).Position(PositionAlignment.Center).Height(350).CloseOnOutsideClick(false).ShowCloseButton(false))
                        /*Configuracion del EditForm*/
                        .Form(f => f.ColCount(1).ShowRequiredMark(true).LabelLocation(FormLabelLocation.Left)
                            .Items(items =>
                            {
                                items.AddSimple().IsRequired(true).DataField("IdAsignacion").ColSpan(1);
                                items.AddSimple().IsRequired(false).DataField("Fecha").ColSpan(1);
                                items.AddSimple().IsRequired(false).DataField("Monto").ColSpan(1);
                                


                            }))
                          )
                       .ErrorRowEnabled(true)
                       .OnInitNewRow("onInitNewRow")
                       .OnInitialized("hideCommand")
);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"


<script>
    var IdAsignacionNew;


    function printTicket(e) {
        IdAbonoPrimaS = e.row.key;
        //alert(IdAsignacionS);
        //window.open('/Viewer/pp/'+IdAsignacionS, '_newtab');
        window.open('/Reportes/Viewer?r=tkp&p=' + IdAbonoPrimaS, '_newtab');
        //wind
    }

    function lookupExpr(item) {
      //alert(item);
      return item.NombreProyecto + "" "" + item.Bloque;
    }

    function displayExp(rowData) {        
        return rowData.NombreCompleto + "" "" + rowData.NombreLote + "" "" + rowData.IdAsignacion;
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Hoja1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            // https://github.com/exceljs/exceljs#writing-xlsx
            workbook.xlsx.writeBuffer().then(functio");
            WriteLiteral("n (buffer) {\r\n                saveAs(new Blob([buffer], { type: \'application/octet-stream\' }), \'Beneficiarios.xlsx\');\r\n            });\r\n        });\r\n        e.cancel = true;\r\n    }\r\n\r\n     function grid_dataSource_beforeSend(operation, ajax) {\r\n");
            WriteLiteral("\r\n             ajax.headers = {\r\n            RequestVerificationToken: \"");
#nullable restore
#line 143 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\Pago\AbonosPrima.cshtml"
                                  Write(Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"""
        };
    }

    function groupTemplate(cellElement, cellInfo) {
        var prima = cellInfo.summaryItems[1].value;        
        var saldo = prima - cellInfo.summaryItems[0].value;
        var groupKey = cellInfo.displayValue + ' Prima: ' + prima +' Abonado Prima: ' + cellInfo.summaryItems[0].value + ' Saldo: ' + saldo;
        //alert(cellInfo.displayValue + ' / ' + cellInfo.summaryItems[0].value);
        $('<span>')
            .text(groupKey)
            .appendTo(cellElement);
        if (isAdministrador()) {
            $(""<div>"")
                .css({ 'float': 'left' })
                .dxButton({
                    text: """",
                    icon: ""fa fa-plus"",
                    stylingMode: ""contained"",
                    hint: ""Registrar pago"",
                    type: ""success"",
                    onClick: function (e) {
                        var idpago = cellInfo.data.key;
                        IdAsignacionNew = idpago;
                        //win");
            WriteLiteral(@"dow.location.href = ""/Pago/Registrar/?p="" + idpago;
                        $('#GridListado').dxDataGrid('instance').addRow();
                    }
                }).appendTo(cellElement);
        }
    }

    function groupDisplay(rowData) {
        return 'Lote: ' + rowData.NombreLote + ' Nombre: ' + rowData.NombreCompleto;// + ' Prima: ' + rowData.Prima;
    }

    function onInitNewRow(e) {
        if(IdAsignacionNew!=null)
            e.data.IdAsignacion = IdAsignacionNew;
        IdAsignacionNew = null;
    }

     function hideCommand(e) {
         var existrole = isAdministrador();
        //alert(existrole);
      
            if (existrole) {
                $(""#GridListado"").dxDataGrid(""columnOption"", ""Commands"", ""visible"", true);
                $(""#GridListado"").dxDataGrid(""instance"").option(""editing.allowAdding"",true)
                $(""#GridListado"").dxDataGrid(""instance"").option(""editing.allowUpdating"",true)
                $(""#GridListado"").dxDataGrid(""instance"").op");
            WriteLiteral(@"tion(""editing.allowDeleting"",true)

            }
            else {
                $(""#GridListado"").dxDataGrid(""columnOption"", ""Commands"", ""visible"", false);
                $(""#GridListado"").dxDataGrid(""instance"").option(""editing.allowAdding"", false);
                $(""#GridListado"").dxDataGrid(""instance"").option(""editing.allowUpdating"", false);
                $(""#GridListado"").dxDataGrid(""instance"").option(""editing.allowDeleting"", false);
            }
        
    }


    function isAdministrador() {
        var existrole = """);
#nullable restore
#line 206 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\Pago\AbonosPrima.cshtml"
                    Write(User.Claims.FirstOrDefault(c => c.Type.Equals("rol")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        //alert(existrole);\r\n        if (existrole != \"\") {\r\n            var role = \"");
#nullable restore
#line 209 "D:\GIT\PayLotsClientAPI\DevExtremeAspNetCoreResponsiveApp\Pages\Pago\AbonosPrima.cshtml"
                   Write(User.Claims.FirstOrDefault(c => c.Type.Equals("rol")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n            if (role.toString().includes(\"Administrador\")) { return true; }\r\n            else { return false;}\r\n        }\r\n    }\r\n</script>\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_Pago_AbonosPrima> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Pago_AbonosPrima> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Pago_AbonosPrima>)PageContext?.ViewData;
        public Pages_Pago_AbonosPrima Model => ViewData.Model;
    }
}
#pragma warning restore 1591
