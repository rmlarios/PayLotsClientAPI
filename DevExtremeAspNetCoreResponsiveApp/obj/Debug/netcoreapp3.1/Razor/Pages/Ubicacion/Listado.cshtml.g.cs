#pragma checksum "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "de37150718d909ffd7ca97c101f51c6a8cc641be"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Pages_Ubicacion_Listado), @"mvc.1.0.razor-page", @"/Pages/Ubicacion/Listado.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using DevExtremeAspNetCoreResponsiveApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\_ViewImports.cshtml"
using Data.Model;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"de37150718d909ffd7ca97c101f51c6a8cc641be", @"/Pages/Ubicacion/Listado.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"caf4cf265ef794e6166e758615041d498a94e71a", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Ubicacion_Listado : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<style>\r\n    .visible{\r\n        visibility: visible;\r\n    }\r\n\r\n    .hidden{\r\n        visibility: hidden;\r\n    }\r\n</style>\r\n\r\n");
#nullable restore
#line 15 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
  
    ViewData["Title"] = "Proyectos Registrados";   

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 19 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
  
   string cssClass = Model.Mensaje != null ? "visible" : "hidden";

#line default
#line hidden
#nullable disable
            WriteLiteral("<div id=\"inputform\"");
            BeginWriteAttribute("class", " class=\"", 421, "\"", 438, 1);
#nullable restore
#line 22 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
WriteAttributeValue("", 429, cssClass, 429, 9, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">Hola</div>\r\n\r\n");
#nullable restore
#line 24 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
 if(Model.Mensaje!=null)
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <script>\r\n        $(function(){ \r\n            bootbox.alert(\'Creado Correctamente\');\r\n        });\r\n    </script>\r\n");
#nullable restore
#line 31 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 33 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
  
var message=TempData["Mensaje"] as string;

#line default
#line hidden
#nullable disable
            WriteLiteral("<input type=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 677, "\"", 693, 1);
#nullable restore
#line 36 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
WriteAttributeValue("", 685, message, 685, 8, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" id=""hdnMessage""/>
<script>
$(document).ready(function(){
      if($(""#hdnMessage"").val()!="""")
     {
         var msg=$(""#hdnMessage"").val();
         bootbox.alert(msg);
         $(""#hdnMessage"").val('');//empty the value so that it won't show everytime
    }
});
</script>


");
#nullable restore
#line 49 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
 using (Html.BeginForm()){

   


#line default
#line hidden
#nullable disable
#nullable restore
#line 53 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
Write(Html.DevExtreme().DataGrid<ViewConsolidadoUbicaciones>
                    ()
                    .ID("GridListado")
                    .DataSource(d => d.RemoteController()
                                                        .LoadUrl(Url.Page("Listado", "Listado"))
                                                        .DeleteUrl(Url.Page("Listado", "Delete"))
                                                        .Key("IdUbicacion")
                                                        //.OnBeforeSend("grid_dataSource_beforeSend") // passes an antiforgery token)
                                                        )                                      
                    .ShowBorders(false)
                    .ElementAttr(new { @class = "dx-card wide-card" })
                    .Export(e => e.Enabled(true).FileName("Beneficiarios"))//.OnExporting("onExporting")
                    .Paging(pag => pag.PageSize(10))
                    .Pager(p => p.ShowPageSizeSelector(false).ShowNavigationButtons(true).ShowInfo(true).InfoText("Página {0} de {1} ({2} Registros)"))
                    .RowAlternationEnabled(true)
                    .HoverStateEnabled(true)                    
                    .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                    .SearchPanel(s => s.Visible(true).HighlightSearchText(true).Width(400))
                    .FilterRow(f => f.ApplyFilter(GridApplyFilterMode.Auto).Visible(true).ShowAllText("Todo"))
                    .FilterSyncEnabled(true)
                    .WordWrapEnabled(true)
                    .ColumnAutoWidth(true)
                    /*Columnas del grid*/
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.IdUbicacion).Visible(false);
                        columns.AddFor(m => m.NombreProyecto);
                        columns.AddFor(m => m.Direccion);
                        columns.AddFor(m => m.Bloques);
                        columns.AddFor(m => m.Asignados);
                        columns.AddFor(m => m.Diponibles);
                        columns.AddFor(m => m.IdMunicipio).Caption("Municipio").DataType(GridColumnDataType.Number).Lookup(look => look
                                                                        .DataSource(d => d.Mvc().Controller("Catalogo")
                                                                                    .LoadAction("Municipios").Key("MunicipioId"))
                                                                        .DisplayExpr("Municipio")
                                                                        .ValueExpr("MunicipioId")
                                                                        );
                        columns.AddFor(m=>m.AplicaInteres).Caption("Intereses");
                        columns.AddFor(m=>m.IdMunicipio).RenderAsync(true);
                        columns.Add().Type(GridCommandColumnType.Buttons).Width(200).Buttons(b =>
                        {
                            b.Add().Name(GridColumnButtonName.Edit);
                            b.Add().Name(GridColumnButtonName.Delete);                            
                            b.Add().Icon("chevrondown").Visible(true).Hint("Detalle").OnClick("openDetail");
                        });
                    }).HeaderFilter(h => h.AllowSearch(true).Visible(true))
                    /*Configuracion para la edicion*/
                    .Editing(e => e.Mode(GridEditMode.Popup)
                        .UseIcons(true)
                        .AllowAdding(true)
                        .AllowUpdating(true)
                        .AllowDeleting(true)
                        .UseIcons(true)
                        .Texts(t => t.AddRow("Nuevo").EditRow("Editar").DeleteRow("Eliminar").ConfirmDeleteMessage("¿Está seguro que desea Eliminar este Registro?")
                        .SaveRowChanges("Guardar").CancelRowChanges("Cancelar"))
                        /*Configuracion del Popup*/
                        .Popup(p => p.Width(700).Title("Formulario de Edición").ShowTitle(true).Position(PositionAlignment.Center).Height(350).CloseOnOutsideClick(false).ShowCloseButton(false))
                        /*Configuracion del EditForm*/
                        .Form(f => f.ColCount(2).ShowRequiredMark(true).LabelLocation(FormLabelLocation.Left)
                            .Items(items =>
                            {
                                items.AddSimpleFor(m => m.NombreProyecto).IsRequired(true).ColSpan(2);
                                items.AddSimpleFor(m=> m.Direccion).IsRequired(true).ColSpan(2);
                                items.AddSimpleFor(m=>m.IdMunicipio).IsRequired(true);
                                items.AddSimpleFor(m=> m.AplicaInteres);
                            }))
                          )
                       .ErrorRowEnabled(true)
                       /*Eventos*/
                       .OnRowDblClick(item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    WriteLiteral(@"
                           function(e)
                           {
                               var dataGrid = $(""#GridListado"").dxDataGrid(""instance"");
                               dataGrid.editRow(e.rowIndex);                               
                           }
                       ");
    PopWriter();
}
))
                       .OnCellClick(item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    WriteLiteral("\r\n                           function(e)\r\n                           {                                \r\n                                DevExpress.ui.notify(e.row.data.NombreProyecto, \"success\", 600);\r\n                           }\r\n                       ");
    PopWriter();
}
))
);

#line default
#line hidden
#nullable disable
#nullable restore
#line 137 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
Write(Html.DevExtreme().Popup
            ()
            .ID("PopBloques")
            .Height(650)
            .Position(PositionAlignment.Center)
            .Width(600)          
            .ShowCloseButton(true)
            .ContentTemplate(item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    WriteLiteral("                              \r\n                ");
#nullable restore
#line 145 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
            Write(Html.DevExtreme().DataGrid<ViewConsolidadoBloques>().ID("gridBloques")
                                            .AllowColumnResizing(true)
                                            .FilterRow(f => f.Visible(true))
                                            .RowAlternationEnabled(true)
                                            .Editing(e => e.Mode(GridEditMode.Popup)
                                                                .UseIcons(true)
                                                                .AllowAdding(true)
                                                                .AllowUpdating(true)
                                                                .AllowDeleting(true)
                                                                .UseIcons(true)
                                                                .Texts(t => t.AddRow("Nuevo").EditRow("Editar").DeleteRow("Eliminar").ConfirmDeleteMessage("¿Está seguro que desea Eliminar este Registro?")
                                                                .SaveRowChanges("Guardar").CancelRowChanges("Cancelar"))
                                            /*Configuracion del Popup*/
                                                        .Popup(p => p.Width(700).Title("Formulario de Edición").ShowTitle(true).Position(PositionAlignment.Center).Height(350).CloseOnOutsideClick(false).ShowCloseButton(false))
                                            /*Configuracion del EditForm*/
                                                        .Form(f => f.ColCount(2).ShowRequiredMark(true).LabelLocation(FormLabelLocation.Left)
                                                        .Items(items =>
                                                        {                                                            
                                                            items.AddSimpleFor(m=> m.Bloque).IsRequired(true).ColSpan(2);
                                                            items.AddSimpleFor(m=>m.Observaciones).ColSpan(2);
                                                            
                                                        })))
                                            .DataSource(d => d.RemoteController()
                                                                    .Key("IdBloque")
                                                                    .LoadUrl(Url.Page("Listado", "Bloques"))
                                                                    .LoadParams(new { id = new JS("getUbicacionId") })
                                                                    .InsertUrl(Url.Page("Listado","CreateBloque"))
                                                                    .OnBeforeSend("grid_dataSource_beforeSend")
                                                                    
                                                                    )
                                                                  
                                            .Columns(c =>
                                            {
                                                        c.AddFor(m=>m.IdBloque).Visible(false);
                                                        c.AddFor(m=>m.IdUbicacion).Visible(false);
                                                        c.AddFor(m=>m.Bloque);
                                                        c.AddFor(m=>m.Asignados);
                                                        c.AddFor(m=>m.Disponibles);
                                                        c.Add().Caption("Lotes").CalculateCellValue("calcTotal");
                                                        c.AddFor(m=>m.Observaciones).Visible(false);
                                                    })
                                            
                                            .NoDataText("No hay Datos que mostrar")
                                            .Paging(pag => pag.PageSize(6))
                                            .Pager(p => p.ShowPageSizeSelector(false).ShowNavigationButtons(true).ShowInfo(true).InfoText("Página {0} de {1} ({2} Registros)"))
                                            .OnRowInserting("onRowInsertingDetail")
                                            .OnRowClick("clickdetail")
                                            .OnRowInserted("onrowInsertedDetail")
                                            .OnDataErrorOccurred("OnDataErrorOccurred")
                                            
                                            
                                           
                );

#line default
#line hidden
#nullable disable
    WriteLiteral("\r\n            ");
    PopWriter();
}
))
            .Visible(false).CloseOnOutsideClick(true).Position(PositionAlignment.Center)
);

#line default
#line hidden
#nullable disable
#nullable restore
#line 200 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
 


}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n<script>\r\n    var IdUbicacion\r\n    function openDetail(e) {        \r\n        IdUbicacion = e.row.key;       \r\n        var popup = $(\"#PopBloques\").dxPopup(\"instance\");\r\n        popup.option(\'title\',e.row.data.NombreProyecto);\r\n        popup.show();\r\n");
            WriteLiteral(@"        $(""#gridBloques"").dxDataGrid(""refresh"");
    }

    function getUbicacionId() {
        return IdUbicacion;
    }

    function calcTotal(data)
    {
        return data.Asignados + data.Disponibles;
    }

    function onRowInsertingDetail(e)
    {
        e.data.IdUbicacion = IdUbicacion;        
    }

    function onrowInsertedDetail(e)
    {
        DevExpress.ui.notify(""Creado Correctamente"",""success"",900);
    }

    function OnDataErrorOccurred(e)
    {

    }

    function clickdetail(e)
    {
        //var msg = """);
#nullable restore
#line 243 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
                Write(ViewData["Mensaje"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        // DevExpress.ui.notify(Model.Mensaje, \"success\", 600);       \r\n        \r\n    }\r\n\r\n    function grid_dataSource_beforeSend(operation, ajax) {\r\n");
            WriteLiteral("\r\n             ajax.headers = {\r\n            RequestVerificationToken: \"");
#nullable restore
#line 255 "D:\GIT\DevExtremeAspNetCoreResponsiveApp\DevExtremeAspNetCoreResponsiveApp\Pages\Ubicacion\Listado.cshtml"
                                  Write(Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"\r\n        };\r\n    }\r\n\r\n    \r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DevExtremeAspNetCoreResponsiveApp.Pages.Ubicacion.ListadoModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<DevExtremeAspNetCoreResponsiveApp.Pages.Ubicacion.ListadoModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<DevExtremeAspNetCoreResponsiveApp.Pages.Ubicacion.ListadoModel>)PageContext?.ViewData;
        public DevExtremeAspNetCoreResponsiveApp.Pages.Ubicacion.ListadoModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
