@page
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{ 
    TempData["ReportName"] = "PlandePago";
}

<div class="row text-center" style="padding-bottom: 10px;">
  <div class="col-md-8"></div>
  <div class="col-md-2 font-bold">Filtrar por Estado:</div>
  <div class="col-md-2">
   @{
        var statuses = new[] { "Todos", "Anulada", "Vigente"};
    }
  @(Html.DevExtreme().SelectBox()
        .DataSource(statuses)        
        .Value(statuses[0])               
        .OnValueChanged(@<text>
            function(data) {
                var dataGrid = $("#GridListado").dxDataGrid("instance");
                if (data.value == "Todos")
                    dataGrid.clearFilter();
                else
                    dataGrid.filter(["Estado", "=", data.value]);
            }
        </text>)
    )
    </div>
</div>


@(Html.DevExtreme().DataGrid<ViewAsignacionesSaldo>
                    ()
                    .ID("GridListado")
                    .DataSource(d=>d.Mvc().Controller("Asignaciones").Key("IdAsignacion")
                    .LoadAction("GetAll")
                    .InsertAction("PostCreate")
                    .UpdateAction("PutUpdate")
                    .DeleteAction("DeletebyId")
                    .OnBeforeSend("grid_dataSource_beforeSend")
                    )
                    .ShowBorders(false)
                    .ElementAttr(new { @class = "dx-card wide-card" })
                    .Export(e => e.Enabled(true).AllowExportSelectedData(true)).OnExporting("exporting")
                    .Paging(pag => pag.PageSize(10))
                    .Pager(p => p.ShowPageSizeSelector(false).ShowNavigationButtons(true).ShowInfo(true).InfoText("Página {0} de {1} ({2} Registros)"))
                    .RowAlternationEnabled(true)
                    .HoverStateEnabled(true)
                    .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                    .SearchPanel(s => s.Visible(true).HighlightSearchText(true).Width(400))
                    .FilterRow(f => f.ApplyFilter(GridApplyFilterMode.Auto).Visible(true).ShowAllText("Todo"))
                    .FilterSyncEnabled(true)
                    .WordWrapEnabled(true)
                    .ColumnAutoWidth(true)
                    /*Columnas del grid*/
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.IdAsignacion).Visible(false);
                        columns.AddFor(m => m.NombreProyecto);
                        columns.AddFor(m => m.NombreLote);
                        columns.AddFor(m => m.NombreCompleto);
                        columns.AddFor(m => m.MontoTotal);
                        columns.AddFor(m => m.Estado);
                        columns.AddFor(m => m.Abonado);
                        columns.AddFor(m=>m.Saldo);
                        columns.Add().Type(GridCommandColumnType.Buttons).Fixed(true).FixedPosition(HorizontalEdge.Left).Buttons(buttons => {
                        buttons.Add().Name(GridColumnButtonName.Edit);
                        buttons.Add().Name("Anular").Hint("Anular").Icon("clear").Visible(new JS("isAnularVisible")).OnClick("openAnular");
                        buttons.Add().Name("PlanPago").Hint("Ver Plan de Pago").Icon("fa fa-calendar").OnClick("printPlan");
                    });
       })
                    .HeaderFilter(h => h.AllowSearch(true).Visible(true))
                    /*Configuracion para la edicion*/
                    .Editing(e => e.Mode(GridEditMode.Popup)
                        .UseIcons(true)
                        .AllowAdding(true)
                        .AllowUpdating(true)
                        //.AllowDeleting(true)
                        .UseIcons(true)
                        .Texts(t => t.AddRow("Nuevo").EditRow("Editar").DeleteRow("Eliminar").ConfirmDeleteMessage("¿Está seguro que desea Eliminar este Registro?")
                        .SaveRowChanges("Guardar").CancelRowChanges("Cancelar"))
                        /*Configuracion del Popup*/
                        .Popup(p => p.Width(700).Title("Formulario de Edición").ShowTitle(true).Position(PositionAlignment.Center).Height(350).CloseOnOutsideClick(false).ShowCloseButton(false))
                        /*Configuracion del EditForm*/
                        .Form(f => f.ColCount(1).ShowRequiredMark(true).LabelLocation(FormLabelLocation.Left)
                            .Items(items =>
                            {
                                items.AddSimple().IsRequired(true).DataField("IdBloque").ColSpan(1);
                                items.AddSimple().IsRequired(false).DataField("NumeroLote").ColSpan(1);
                                items.AddSimple().IsRequired(false).DataField("Area").ColSpan(1);
                                
                            }))
                          )
                       .ErrorRowEnabled(true)
                       .OnEditingStart(@<text>
                           function(e)
                           { 
                               e.cancel = true;                              
                               var id = e.data.IdAsignacion;
                               window.location.href="/Asignacion/Registrar/?p=" + id ;
                           }
                       </text>)
                       .OnInitNewRow(@<text>
                           function(e)
                           { 
                               e.cancel = true;                              
                               var id = e.data.IdAsignacion;
                               window.location.href="/Asignacion/Registrar/?p=0" ;
                           }
                       </text>                       
                       )
                       .OnCellPrepared("onCellPrepared")
                       .OnRowPrepared("onRowPrepared")
                       
                      
)

 
<input type="hidden" id="IdAsignacion" name="IdAsignacion">
@(Html.DevExtreme().Popup
            ()
            .ID("PopAnular")
            .Height(400)
            .Position(PositionAlignment.Center)            
            .Width(600)
            .Title("Lotes Asignados: ")
            .ShowCloseButton(true)            
            .ContentTemplate(@<text>                
@using (Html.BeginForm("Anular","Asignaciones",FormMethod.Post))
{  
    

                @(Html.DevExtreme().Form<AnularAsignacionRequest>().ID("formAnular").ColCount(2).Height(350).ShowValidationSummary(true)
                    .Items(item => {
                        item.AddSimpleFor(m=>m.Observaciones).IsRequired(true).ColSpan(2).Editor(e=>e.TextBox().StylingMode(EditorStylingMode.Outlined).Height(50));                        
                        item.AddSimpleFor(m=>m.IdAsignacion).Editor(e=>e.TextBox().Visible(false)).Visible(true);
                        item.AddGroup().ColSpan(2).ColCount(2).Items(i=>{
                            i.AddButton().Name("Anular").ColSpan(1).ButtonOptions(o=>o.Text("Aceptar").UseSubmitBehavior(true).Type(ButtonType.Danger).Width("100%"));
                            i.AddButton().Name("Cancelar").ColSpan(1).ButtonOptions(o=>o.Text("Cancelar").Type(ButtonType.Success).Width("100%"));
                        });
                    })
                    .OnInitialized("onFormInitialized").OnContentReady("onFormReady")
                )                }
            </text>)
            
            .Visible(false).CloseOnOutsideClick(true).Position(PositionAlignment.Center)
)



<script>
    var IdAsignacionS,vform;

     $(function(){
     var msg = "@(TempData["Msg"] as string)";
     if (msg !== "") {
         //alert(msg);
     }
  });

    function onFormInitialized(e) {
        vform = e.component;        
        
    }

    function onFormReady(e){
        vform.getEditor("IdAsignacion").option("value",IdAsignacionS);
    }

    function openAnular(e){
        IdAsignacionS = e.row.key;
        document.getElementById("IdAsignacion").value = IdAsignacionS;
        var popup = $("#PopAnular").dxPopup("instance");       
        popup.option('title',e.row.data.NombreCompleto + ' ' + e.row.data.NombreLote);
        popup.show();
    }

    function printPlan(e) {
        IdAsignacionS = e.row.key;
        //alert(IdAsignacionS);
        window.open('/ReportViewer/?r=pp&p='+IdAsignacionS, '_newtab');
        //window.location.href = "/ReportViewer/?p=";
    }


    function lookupExpr(item) {
      //alert(item);
      return item.NombreProyecto + " " + item.Bloque;
    }

    function onCellPrepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var $links = e.cellElement.find(".dx-link");
            if (e.row.data.Estado == "Anulada")
                $links.filter(".dx-link-edit").remove();
        }         
    }

    function onRowPrepared(e) {
        if (e.rowType === "data" && e.data.Estado === "Anulada")
            e.rowElement.css("color","red");
    }

    function isAnularVisible(e) {
        return !e.row.isEditing && e.row.data.Estado=="Vigente";
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Hoja1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            // https://github.com/exceljs/exceljs#writing-xlsx
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Beneficiarios.xlsx');
            });
        });
        e.cancel = true;
    }

     function grid_dataSource_beforeSend(operation, ajax) {
        @* var data = ajaxSettings.data || {},
            args = Object.keys(data).map(function (key) {
                return key + "=" + data[key];
            }).join(" "); *@

             ajax.headers = {
            RequestVerificationToken: "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken"
        };
    }

</script>