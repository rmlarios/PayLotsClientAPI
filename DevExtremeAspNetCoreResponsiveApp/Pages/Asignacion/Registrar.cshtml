@page
@model DevExtremeAspNetCoreResponsiveApp.Pages.Asignacion.RegistrarModel


@{
    ViewData["Title"] = "Registrar Asignación";
}

@using(Html.BeginForm(method: FormMethod.Post)) 
{

<input type="hidden" asp-for="Asignaciones.IdAsignacion" name="IdAsignacion">
@(Html.DevExtreme().Form<Asignaciones>()
            .ID("form")
            .ColCount(2)
            .FormData(Model.Asignaciones)
            .LabelLocation(FormLabelLocation.Left)
            .MinColWidth(300)
            .ColCount(4)
            .Height("50%")
            .ReadOnly(false)            
            .ShowColonAfterLabel(true)
            
            
            .Items(item =>{
               item.AddGroup().ColSpan(4).ColCount(6).Items(i => {
                   i.AddButton().Name("Guardar").ColSpan(1).ButtonOptions(o=>o.Icon("save").Text("Guardar").Type(ButtonType.Success).UseSubmitBehavior(true).Width("100%"));
                   i.AddButton().Name("Nuevo").ColSpan(1).ButtonOptions(o=>o.Icon("fa fa-file-o").Text("Nuevo").Type(ButtonType.Success).Width("100%").OnClick(
                       @<text>
                           function(e)
                           {                             
                              
                               window.location.href="/Asignacion/Registrar/?p=" + 0 ;
                           }
                       </text>
                   ));
               });
               /*item.AddButton().Name("Guardar").ButtonOptions(o => o.Icon("save").Text("Guardar").Type(ButtonType.Success).UseSubmitBehavior(true));*/
               item.AddSimpleFor(m => m.IdAsignacion).Visible(false);
               item.AddSimpleFor(m => m.IdLote).ColSpan(2).Label(l => l.Text("Seleccione el lote")).IsRequired(true).Editor(e => e.Lookup().DataSource(d => d.Mvc().Controller("Lotes").LoadAction("GetAll").Key("IdLote")).DisplayExpr(new JS("lookupExpr")).ValueExpr("IdLote").SearchEnabled(true).SearchMode(DropDownSearchMode.Contains).StylingMode(EditorStylingMode.Filled)               
               );
               item.AddSimpleFor(m => m.IdBeneficiario).ColSpan(2).Label(l => l.Text("Seleccione el beneficiario")).IsRequired(true).Editor(e => e.Lookup().DataSource(d => d.Mvc().Controller("Beneficiarios").LoadAction("GetAll").Key("IdBeneficiario")).DisplayExpr("NombreCompleto").ValueExpr("IdBeneficiario").SearchEnabled(true).SearchMode(DropDownSearchMode.Contains).StylingMode(EditorStylingMode.Outlined)               
               );
               item.AddSimpleFor(m => m.MontoTotal).ColSpan(1).Label(l => l.Text("Valor del Lote")).IsRequired(true).Editor(e=>e.NumberBox().ShowSpinButtons(true).Mode(NumberBoxMode.Number).Format("$ #,##0.##").StylingMode(EditorStylingMode.Outlined));
               item.AddSimpleFor(m => m.FechaInicioPago).ColSpan(1).Label(l => l.Text("Fecha de Incio de Pago")).IsRequired(true).Editor(e => e.DateBox().DisplayFormat("dd/MM/yyyy"));
               item.AddSimpleFor(m => m.CuotaMinima).ColSpan(1).Label(l => l.Text("Cuota Mínima"));
               item.AddSimpleFor(m => m.Prima).ColSpan(1);              
               item.AddSimpleFor(m => m.Donado).ColSpan(1);
               item.AddSimpleFor(m => m.AplicaMora).ColSpan(1).Label(l => l.Text("Aplicar Mora"));
               item.AddSimpleFor(m => m.AplicaInteres).ColSpan(1).Label(l => l.Text("Aplicar interés"));
               item.AddSimpleFor(m => m.TasaInteres).ColSpan(1).Label(l => l.Text("Tasa de Interés"));
               item.AddSimpleFor(m => m.Plazo).ColSpan(1);
               item.AddSimpleFor(m => m.Observaciones).ColSpan(3);

            })
        ) 

}
<br>

@(Html.DevExtreme().DataGrid<Asignacion_PlandePago>
                    ()
                    .ID("GridListado")
                    .DataSource(d=>d.Mvc().Controller("Pagos")//.Key("IdAsignacion")
                    //.LoadMethod("Plan")
                    .LoadAction("GetPlan")                    
                    .LoadParams(new { idasignacion = new JS("getIdAsignacion") })                                       
                    )
                    .ColumnResizingMode(ColumnResizingMode.NextColumn)           
                    .NoDataText("No hay registros que mostrar")
                    .ShowBorders(true)
                    .ElementAttr(new { @class = "dx-card wide-card" })
                    .Export(e => e.Enabled(true)).OnExporting("exporting")
                    .Paging(pag => pag.PageSize(6))
                    .Pager(p => p.ShowPageSizeSelector(false).ShowNavigationButtons(true).ShowInfo(true).InfoText("Página {0} de {1} ({2} Registros)"))
                    .RowAlternationEnabled(true)
                    .HoverStateEnabled(true)
                    .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                    .SearchPanel(s => s.Visible(true).HighlightSearchText(true).Width(400))
                    .FilterRow(f => f.ApplyFilter(GridApplyFilterMode.Auto).Visible(true).ShowAllText("Todo"))
                    .FilterSyncEnabled(true)
                    .WordWrapEnabled(true)
                    .ColumnAutoWidth(true)
                    /*Columnas del grid*/
                    .Columns(c =>{
                        c.AddFor(m => m.NumeroCuota);
                        c.AddFor(m=>m.MesPagado);
                        c.AddFor(m=>m.MontoMinimo);
                        c.AddFor(m=>m.FechaCuota).DataType(GridColumnDataType.Date).Format("dd/MM/yyyy");
                        c.AddFor(m=>m.MontoPagado);
                        c.AddFor(m=>m.Interes);
                        c.AddFor(m=>m.Mora);
                        c.AddFor(m=>m.FechaPago);
                        c.AddFor(m=>m.Saldo);
                        c.AddFor(m=>m.Estado);
                    })
                   
                    .HeaderFilter(h => h.AllowSearch(true).Visible(true))
                    /*Configuracion para la edicion*/
                    .Editing(e => e.Mode(GridEditMode.Popup)
                        .UseIcons(true)
                        .AllowAdding(false)
                        .AllowUpdating(false)
                        //.AllowDeleting(true)
                        .UseIcons(true)
                        .Texts(t => t.AddRow("Nuevo").EditRow("Editar").DeleteRow("Eliminar").ConfirmDeleteMessage("¿Está seguro que desea Eliminar este Registro?")
                        .SaveRowChanges("Guardar").CancelRowChanges("Cancelar"))
                        /*Configuracion del Popup*/
                        .Popup(p => p.Width(700).Title("Formulario de Edición").ShowTitle(true).Position(PositionAlignment.Center).Height(350).CloseOnOutsideClick(false).ShowCloseButton(false))
                        /*Configuracion del EditForm*/
                        .Form(f => f.ColCount(1).ShowRequiredMark(true).LabelLocation(FormLabelLocation.Left)
                            .Items(items =>
                            {
                                
                                
                            }))
                          )
                       .ErrorRowEnabled(true)
                      
)

 <script>
    function lookupExpr(item) {
      //alert(item);
      return item.NombreProyecto + " " + item.NombreLote;      
    }

    function getIdAsignacion(){
        var r = $("#form").dxForm("option", "formData").IdAsignacion;
       
        return r;
    }

     function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Hoja1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            // https://github.com/exceljs/exceljs#writing-xlsx
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PlandePago.xlsx');
            });
        });
        e.cancel = true;
    }   

   
        </script>
