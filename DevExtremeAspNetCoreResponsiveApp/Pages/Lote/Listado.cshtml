@page
@{
    ViewData["Title"] = "Lotes Registrados";
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@(Html.DevExtreme().DataGrid<ViewLotes>
                    ()
                    .ID("GridListado")
                    .DataSource(d=>d.Mvc().Controller("Lotes").Key("IdLote")
                    .LoadAction("GetAll")
                    .InsertAction("PostCreate")
                    .UpdateAction("PutUpdate")
                    .DeleteAction("DeletebyId")
                    .OnBeforeSend("grid_dataSource_beforeSend")
                    )
                    .RemoteOperations(r=>r.Paging(true))
                    .ShowBorders(false)
                    .ElementAttr(new { @class = "dx-card wide-card" })
                    .Export(e => e.Enabled(true).AllowExportSelectedData(true)).OnExporting("exporting")
                    .Paging(pag => pag.PageSize(10))
                    .Pager(p => p.ShowPageSizeSelector(false).ShowNavigationButtons(true).ShowInfo(true).InfoText("Página {0} de {1} ({2} Registros)"))
                    .RowAlternationEnabled(true)
                    .HoverStateEnabled(true)
                    .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                    .SearchPanel(s => s.Visible(true).HighlightSearchText(true).Width(400))
                    .FilterRow(f => f.ApplyFilter(GridApplyFilterMode.Auto).Visible(true).ShowAllText("Todo"))
                    .FilterSyncEnabled(true)
                    .WordWrapEnabled(true)
                    .ColumnAutoWidth(true)
                    /*Columnas del grid*/
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.IdLote).Visible(false);
                        columns.AddFor(m => m.NombreProyecto);
                        columns.AddFor(m => m.NombreLote);
                        columns.AddFor(m => m.Area);
                        columns.AddFor(m => m.EstadoActual);
                        columns.AddFor(m => m.Municipio);
                        columns.AddFor(m => m.Departamento);
                        columns.AddFor(m=>m.NumeroLote).Visible(false);
                        columns.AddFor(m => m.IdBloque).Visible(false).Caption("Bloque").Lookup(look => look
                                                                        .DataSource(d => d.Mvc().Controller("Bloques")
                                                                                    .LoadAction("GetAll").Key("IdBloque"))
                                                                        .DisplayExpr(new JS("lookupExpr"))
                                                                        .ValueExpr("IdBloque")
                                                                        )
                      .EditorOptions(new {
                    searchExpr = new string[] { "NombreProyecto", "Bloque" }});
                    })
                    .HeaderFilter(h => h.AllowSearch(true).Visible(true))
                    /*Configuracion para la edicion*/
                    .Editing(e => e.Mode(GridEditMode.Popup)
                        .UseIcons(true)
                        .AllowAdding(true)
                        .AllowUpdating(true)
                        .AllowDeleting(true)
                        .UseIcons(true)
                        .Texts(t => t.AddRow("Nuevo").EditRow("Editar").DeleteRow("Eliminar").ConfirmDeleteMessage("¿Está seguro que desea Eliminar este Registro?")
                        .SaveRowChanges("Guardar").CancelRowChanges("Cancelar"))
                        /*Configuracion del Popup*/
                        .Popup(p => p.Width(700).Title("Formulario de Edición").ShowTitle(true).Position(PositionAlignment.Center).Height(350).CloseOnOutsideClick(false).ShowCloseButton(false))
                        /*Configuracion del EditForm*/
                        .Form(f => f.ColCount(1).ShowRequiredMark(true).LabelLocation(FormLabelLocation.Left)
                            .Items(items =>
                            {
                                items.AddSimple().IsRequired(true).DataField("IdBloque").ColSpan(1);
                                items.AddSimple().IsRequired(false).DataField("NumeroLote").ColSpan(1);
                                items.AddSimple().IsRequired(false).DataField("Area").ColSpan(1);

                            }))
                          )
                       .ErrorRowEnabled(true)
                       .OnInitialized("isAdministrador")
)

<script>
    function lookupExpr(item) {
      //alert(item);
      return item.NombreProyecto + " " + item.Bloque;
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Hoja1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            // https://github.com/exceljs/exceljs#writing-xlsx
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Beneficiarios.xlsx');
            });
        });
        e.cancel = true;
    }

     function grid_dataSource_beforeSend(operation, ajax) {
        @* var data = ajaxSettings.data || {},
            args = Object.keys(data).map(function (key) {
                return key + "=" + data[key];
            }).join(" "); *@

             ajax.headers = {
            RequestVerificationToken: "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken"
        };
    }

    function isAdministrador() {
        var existrole = "@User.Claims.FirstOrDefault(c => c.Type.Equals("rol"))";
        //alert(existrole);
        var isAdmon = false;
        if (existrole != "") {
            var role = "@User.Claims.FirstOrDefault(c => c.Type.Equals("rol"))";
            if (role.toString().includes("Administrador")) { isAdmon = true; }
            else { isAdmon = false; }
        }
        else
            isAdmon = false;

        $("#GridListado").dxDataGrid("instance").option("editing.allowAdding", isAdmon);
        $("#GridListado").dxDataGrid("instance").option("editing.allowUpdating", isAdmon);
        $("#GridListado").dxDataGrid("instance").option("editing.allowDeleting", isAdmon);

    }


</script>