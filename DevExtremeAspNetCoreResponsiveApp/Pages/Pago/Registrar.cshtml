@page
@using DevExpress.AspNetCore

<link rel="stylesheet" href="~/css/viewer.part.bundle.css" />
@model DevExtremeAspNetCoreResponsiveApp.Pages.Pago.RegistrarModel
@{
    ViewData["Title"] = "Registrar Pago";
}

@using (Html.BeginForm(method: FormMethod.Post))
{

    <input type="hidden" asp-for="pago.IdPago" name="IdPago">
    <input type="hidden" asp-for="pago.MesPagado" name="IdMes">
    @(Html.DevExtreme().Form<ViewPagosAsignaciones>()
            .ID("form")
            .ColCount(2)
            .FormData(Model.pago)
            .LabelLocation(FormLabelLocation.Left)
            .MinColWidth(300)
            .ColCount(4)
            .Height("50%")
            .ReadOnly(false)
            .ShowColonAfterLabel(true)
            .ShowValidationSummary(true)
            //.Disabled(new JS("disableForm"))
            .Items(item =>{
               item.AddGroup().ColSpan(4).ColCount(6).Items(i => {
                   i.AddButton().Name("Guardar").ColSpan(1).ButtonOptions(o=>o.Icon("save").Text("Guardar").Type(ButtonType.Success).UseSubmitBehavior(true).Width("100%"));
                   i.AddButton().Name("Nuevo").ColSpan(1).ButtonOptions(o=>o.Icon("fa fa-file-o").Text("Nuevo").Type(ButtonType.Success).Width("100%").OnClick(
                       @<text>
                           function(e)
                           {

                               window.location.href="/Pago/Registrar/?p=" + 0 ;
                           }
                       </text>
                   ));
                   i.AddButton().Name("Cancelar").ColSpan(1).ButtonOptions(o=>o.Icon("").Text("Cancelar").Type(ButtonType.Success).Width("100%").OnClick(
                       @<text>
                           function(e)
                           {
                               window.location.reload();
                           }
                       </text>
               ));
               i.AddSimpleFor(m => m.EstadoPago).ColSpan(1).Editor(e => e.TextBox().ReadOnly(true).StylingMode(EditorStylingMode.Outlined));
           });
            /*item.AddButton().Name("Guardar").ButtonOptions(o => o.Icon("save").Text("Guardar").Type(ButtonType.Success).UseSubmitBehavior(true));*/
            //item.AddSimpleFor(m => m.IdAsignacion).Visible(false);
            item.AddSimpleFor(m=>m.Estado).Visible(false);
        item.AddSimpleFor(m => m.IdAsignacion).ColSpan(2).Label(l => l.Text("Lote")).Editor(e => e.Lookup().DataSource(d => d.Mvc().Controller("Asignaciones").LoadAction("GetAll").Key("IdAsignacion")).DataSourceOptions(o=>
            o.Filter("[['Estado', '=', 'Vigente'],'and',['PrimaCancelada','=','true']]").Paginate(false))

            .SearchExpr("NombreLote").SearchMode(DropDownSearchMode.Contains).DisplayExpr(new JS("lookupExpr")).ValueExpr("IdAsignacion").PageLoadingText("Cargando").NextButtonText("Más").PageLoadMode(ListPageLoadMode.NextButton).SearchEnabled(true).SearchMode(DropDownSearchMode.Contains).StylingMode(EditorStylingMode.Outlined)

            .OnValueChanged(@<text>
                function(e){
                    window.location.href="/Pago/Registrar/?p=" + e.value+".0";
                }
                </text>)
                )
                ;

                item.AddSimpleFor(m => m.NombreCompleto).ColSpan(2).Label(l => l.Text("Beneficiario")).Editor(e=>e.TextBox().ReadOnly(true).StylingMode(EditorStylingMode.Outlined));

                item.AddSimpleFor(m => m.MontoTotal).ColSpan(1).Label(l => l.Text("Valor del Lote")).Editor(e=>e.NumberBox().ShowSpinButtons(true).Mode(NumberBoxMode.Number).Format("$ #,##0.##").StylingMode(EditorStylingMode.Outlined).ReadOnly(true));

                item.AddSimpleFor(m => m.Prima).ColSpan(1).Editor(e=>e.NumberBox().ShowSpinButtons(true).Mode(NumberBoxMode.Number).Format("$ #,##0.##").StylingMode(EditorStylingMode.Outlined).ReadOnly(true));
                item.AddSimpleFor(m => m.Abonado).ColSpan(1).Editor(e => e.NumberBox().ShowSpinButtons(true).Mode(NumberBoxMode.Number).Format("$ #,##0.##").StylingMode(EditorStylingMode.Outlined).ReadOnly(true));
                item.AddSimpleFor(m => m.Saldo).ColSpan(1).Editor(e => e.NumberBox().ShowSpinButtons(true).Mode(NumberBoxMode.Number).Format("$ #,##0.##").StylingMode(EditorStylingMode.Outlined).ReadOnly(true));


                item.AddGroup().Name("DetallePago").Caption("Detalle del Pago").ColCount(5).ColSpan(4).Items(item =>
                {
                    item.AddSimpleFor(m => m.MesPagado).Editor(e=>e.Lookup().StylingMode(EditorStylingMode.Outlined).OnContentReady("onMesReady").OnSelectionChanged("onMesChanged")
                    .DataSource(d=>d.Mvc().Controller("Pagos").Key("MesPagado").LoadAction("GetMeses").LoadParams(new { idasignacion = new JS("getIdAsignacion"),idpago = new JS("getIdPago") }))
                    //.DataSourceOptions(o => o.Filter("[['Estado', '=', 'Disponible'],'or',['IdLote','=',document.getElementsByName('IdLoteOld')[0].value]]"))
                    .DisplayExpr("MesPagado")
                    );
                    item.AddSimpleFor(m=>m.MontoPago).Editor(e => e.NumberBox().ShowSpinButtons(true).ReadOnly(true).StylingMode(EditorStylingMode.Outlined));
                    item.AddSimpleFor(m=>m.Mora).Editor(e => e.NumberBox().ShowSpinButtons(true).ReadOnly(true).StylingMode(EditorStylingMode.Outlined));
                    item.AddSimpleFor(m=>m.Interés).Editor(e => e.NumberBox().ShowSpinButtons(true).ReadOnly(true).StylingMode(EditorStylingMode.Outlined));
                    item.AddSimple().Name("TotalPagar").Label(l=>l.Text("Total a Pagar")).Editor(e => e.NumberBox().ShowSpinButtons(true).ReadOnly(true).StylingMode(EditorStylingMode.Outlined));
                    item.AddSimpleFor(m => m.NumeroRecibo).Editor(e => e.TextBox().ReadOnly(true).StylingMode(EditorStylingMode.Outlined));
                    item.AddSimpleFor(m => m.FechaRecibo).Editor(e => e.DateBox().DisplayFormat("dd/MM/yyyy").StylingMode(EditorStylingMode.Outlined));
                    item.AddSimpleFor(m => m.MontoEfectivo).Editor(e => e.NumberBox().ShowSpinButtons(true).StylingMode(EditorStylingMode.Outlined));
                    item.AddSimpleFor(m => m.Moneda).Editor(e => e.SelectBox().Items(new string[] {"Dólares","Córdobas"}).OnSelectionChanged("onMonedaChanged").StylingMode(EditorStylingMode.Outlined));
                    item.AddSimpleFor(m => m.TasaCambio).Editor(e => e.NumberBox().ShowSpinButtons(true).StylingMode(EditorStylingMode.Outlined).Min(0));
                    item.AddSimpleFor(m => m.Observaciones).Editor(e=>e.TextBox().StylingMode(EditorStylingMode.Outlined));
                }
                    );



            }).OnInitialized("onFormInitialized").OnContentReady("onFormReady")

        )

}

@(Html.DevExtreme().DataGrid<Pagos>
                    ()
                    .ID("GridListado")
                    .DataSource(d=>d.Mvc().Controller("Pagos").Key("IdPago")
                    //.LoadMethod("Plan")
                    .LoadAction("GetbyId").DeleteAction("DeletebyId")
                    .LoadParams(new { id = new JS("getIdAsignacion") })
                    )
                    .ColumnResizingMode(ColumnResizingMode.NextColumn)
                    .NoDataText("No hay registros que mostrar")
                    .ShowBorders(true)
                    .ElementAttr(new { @class = "dx-card wide-card" })
                    .Export(e => e.Enabled(true)).OnExporting("exporting")
                    .Paging(pag => pag.PageSize(6))
                    .Pager(p => p.ShowPageSizeSelector(false).ShowNavigationButtons(true).ShowInfo(true).InfoText("Página {0} de {1} ({2} Registros)"))
                    .RowAlternationEnabled(true)
                    .HoverStateEnabled(true)
                    .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                    .SearchPanel(s => s.Visible(true).HighlightSearchText(true).Width(400))
                    .FilterRow(f => f.ApplyFilter(GridApplyFilterMode.Auto).Visible(true).ShowAllText("Todo"))
                    .FilterSyncEnabled(true)
                    .WordWrapEnabled(true)
                    .ColumnAutoWidth(true)
                    /*Columnas del grid*/
                    .Columns(c =>{
                    c.Add().Type(GridCommandColumnType.Buttons).Buttons(b=> {
                        b.Add().Name(GridColumnButtonName.Edit);                       
                        b.Add().Icon("fa fa-print").Hint("Imprimir").OnClick("printTicket");
                        b.Add().Name("Anular").Hint("Anular").Icon("clear").Visible(new JS("isAnularVisible")).OnClick("openAnular");
                    }).Name("Commands");
                    c.AddFor(m => m.IdPago).Visible(false).SortOrder(SortOrder.Desc);
                    c.AddFor(m => m.IdAsignacion).Visible(false);
                    c.AddFor(m => m.Estado);
                    c.AddFor(m=>m.MesPagado);
                    c.AddFor(m=>m.NumeroRecibo);
                    c.AddFor(m=>m.FechaRecibo).DataType(GridColumnDataType.Date).Format("dd/MM/yyyy");
                    c.AddFor(m=>m.MontoPago).Caption("Principal");
                    c.AddFor(m=>m.Interés);
                    c.AddFor(m=>m.Mora);
                    c.Add().Name("TotalPagado").Caption("Total").CalculateCellValue(@<text>
                        function(rowData) {
                            return rowData.MontoPago + rowData.Interés + rowData.Mora;
                        }
                        </text>);
                    })
                    .Summary(s => s.TotalItems(t => {
                        t.Add().Name("TotalSum").SummaryType(SummaryType.Custom).DisplayFormat("Total Pagado: ${0}").ShowInColumn("Total").ValueFormat(Format.Decimal);
                        t.Add().Name("TotalPrinc").SummaryType(SummaryType.Custom).DisplayFormat("Total Abonado: ${0}").ValueFormat(Format.Decimal).ShowInColumn("MontoPago");
                    }
                    ).CalculateCustomSummary("calcCustomSummary"))
                    .HeaderFilter(h => h.AllowSearch(true).Visible(true))
                    /*Configuracion para la edicion*/
                    .Editing(e => e.Mode(GridEditMode.Popup)
                        .UseIcons(true)
                        .AllowAdding(true)
                        .AllowUpdating(true)
                      
                        .UseIcons(true)
                        .Texts(t => t.AddRow("Nuevo").EditRow("Editar").DeleteRow("Eliminar").ConfirmDeleteMessage("¿Está seguro que desea Eliminar este Registro?")
                        .SaveRowChanges("Guardar").CancelRowChanges("Cancelar"))
                        /*Configuracion del Popup*/
                        .Popup(p => p.Width(700).Title("Formulario de Edición").ShowTitle(true).Position(PositionAlignment.Center).Height(350).CloseOnOutsideClick(false).ShowCloseButton(false))
                        /*Configuracion del EditForm*/
                        .Form(f => f.ColCount(1).ShowRequiredMark(true).LabelLocation(FormLabelLocation.Left)
                            .Items(items =>
                            {


                            }))
                          )
                       .ErrorRowEnabled(true)
                       .OnEditingStart(@<text>
                           function(e)
                           {
                               e.cancel = true;
                               var idasignacion = e.data.IdAsignacion;
                               var idpago = e.data.IdPago;
                               window.location.href="/Pago/Registrar/?p=" + idasignacion+"."+idpago ;
                           }
                        </text>)
                       .OnInitNewRow("newPago")
                       .OnInitialized("hideCommand")
                       .OnRowPrepared("onRowPrepared")
                       .OnCellPrepared("onCellPrepared")

)
@(Html.DevExtreme().Popup().ID("popRecibo").MaxWidth("600px").MaxHeight("800px").CloseOnOutsideClick(false).Title("Imprimir Recibo")
        .Width("600px").Height("800px").Position(PositionAlignment.Center).ContentTemplate(@<text>
@(Html.DevExpress().WebDocumentViewer("Viewer2").Height("800px").Bind(Model.ticketPago).AutoBind(true))
</text>))
@(Html.DevExtreme().Popup().ID("popRecibo2").MaxWidth("600px").MaxHeight("800px").CloseOnOutsideClick(false).Title("Imprimir Recibo")
        .Width("600px").Height("800px").Position(PositionAlignment.Center).ContentTemplate(
    @<text>
            <div id="result_Voucher_Item_popup">
            </div></text>
    ))


<input type="hidden" id="IdPagoAnular" name="IdPagoAnular">
@(Html.DevExtreme().Popup
            ()
            .ID("PopAnular")
            .Height(400)
            .Position(PositionAlignment.Center)
            .Width(600)
            .Title("Lotes Asignados: ")
            .ShowCloseButton(true)
            .ContentTemplate(@<text>
@using (Html.BeginForm("Anular","Pagos",FormMethod.Post))
{


                @(Html.DevExtreme().Form<AnularPagoRequest>().ID("formAnular").ColCount(2).Height(350).ShowValidationSummary(true)
                    .Items(item => {
                        item.AddSimpleFor(m=>m.Observaciones).IsRequired(true).ColSpan(2).Editor(e=>e.TextBox().StylingMode(EditorStylingMode.Outlined).Height(50));
                        item.AddSimpleFor(m=>m.IdPago).Editor(e=>e.TextBox().Visible(false)).Visible(true);
                        item.AddGroup().ColSpan(2).ColCount(2).Items(i=>{
                            i.AddButton().Name("Anular").ColSpan(1).ButtonOptions(o=>o.Text("Aceptar").UseSubmitBehavior(false).OnClick("anular").Type(ButtonType.Danger).Width("100%"));
                            i.AddButton().Name("Cancelar").ColSpan(1).ButtonOptions(o=>o.Text("Cancelar").Type(ButtonType.Success).Width("100%"));
                        });
                    })
                    .OnInitialized("onFormAnularInitialized").OnContentReady("onFormAnularReady")
                )                }
            </text>)

            .Visible(false).CloseOnOutsideClick(true).Position(PositionAlignment.Center)
)



<script>
    var vform, isFirstLoad = true, IdAsignacion, IdPago, IdPagoAnular, vformanular;

    $(function () {
        var msg = "@(TempData["Imprimir"] as string)";
        if (msg == "S") {
            //alert(msg);
            var popup = $("#popRecibo").dxPopup("instance");
            popup.show();
        }
    });


    function onFormInitialized(e) {
        vform = e.component;
    }

    function onFormAnularInitialized(e) {
        vformanular = e.component;
    }

    function onFormAnularReady(e) {
        vformanular.getEditor("IdPago").option("value", IdPagoAnular);
    }

    function onRowPrepared(e) {
        if (e.rowType === "data" && e.data.Estado === "Anulado")
            e.rowElement.css("color", "red");
    }

    function onCellPrepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var $links = e.cellElement.find(".dx-link");
            if (e.row.data.Estado == "Anulado")
                $links.filter(".dx-link-edit").remove();
        }
    }
    function isAnularVisible(e) {
        return !e.row.isEditing && e.row.data.Estado == "Vigente" && hideCommand();
    }

    function calcCustomSummary(options) {
       
        //if (options.name === "TotalSum") {
            if (options.summaryProcess === "start") {
                options.totalValue = 0;
            }
            if (options.summaryProcess === "calculate") {                
                if (options.value.Estado == "Vigente") {
                    if (options.name === "TotalSum")
                        options.totalValue = options.totalValue + options.value.MontoPago + options.value.Interés + options.value.Mora;
                    else if (options.name === "TotalPrinc")
                        options.totalValue = options.totalValue + options.value.MontoPago;
                    //options.totalValue = options.totalValue + options.value.TotalPagado;
                }
                /* if (options.component.isRowSelected(options.value.ID)) {
                     options.totalValue = options.totalValue + options.value.SaleAmount;
                 }*/
            }
            if (options.summaryProcess === "finalize") {
                //
            }
        //}
    }
    function openAnular(e) {
        IdPagoAnular = e.row.key;
        document.getElementById("IdPagoAnular").value = IdPagoAnular;
        var popup = $("#PopAnular").dxPopup("instance");
        popup.option('title', e.row.data.MesPagado + ' ' + e.row.data.NumeroRecibo);        
        popup.show();
        vformanular.getEditor("Observaciones").option("value", "");
        vformanular.getEditor("IdPago").option("value", IdPagoAnular);
    }

    

      function anular(e) {
         var dxFormInstance = $("#formAnular").dxForm("instance");
         var validationResult = dxFormInstance.validate();
         var values = dxFormInstance.option("formData");
         //alert(values);
         if (validationResult.isValid) {
             $.ajax({
                 type: "POST",
                 url: '@Url.Action("Anular", "Pagos")',
                 data: values,
                 dataType: "json",
                 //contentType: "application/json; charset=utf-8",
                 //contentType: "application/json; charset=utf-8",
                 success: function (data, textStatus, jqXHR) {
                     //alert(data + " - " + textStatus + " - " + jqXHR);
                     var popup = $("#PopAnular").dxPopup("instance");
                     popup.hide();
                     dxFormInstance.resetValues();
                     $("#GridListado").dxDataGrid("instance").refresh();
                 },
                 error: function (xhr, textStatus, errorThrown) {
                     //alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
                 }
             });
         }
         else {
             alert("Datos Incompletos");
         }

    }

    function hideCommand(e) {
        var existrole = "@User.Claims.FirstOrDefault(c => c.Type.Equals("rol"))";
        //alert(existrole);
        if (existrole!="") {
            var role = "@User.Claims.FirstOrDefault(c => c.Type.Equals("rol"))";
            var estado = vform.getEditor("EstadoPago").option("value");
            if (role.toString().includes("Administrador")) {
                $("#GridListado").dxDataGrid("columnOption", "Commands", "visible", true);
                vform.getEditor("Guardar").option("disabled", false);
                if (estado === "Anulado") vform.getEditor("Guardar").option("disabled", true);
                return true;
            }
            else {
                $("#GridListado").dxDataGrid("columnOption", "Commands", "visible", false);
                vform.getEditor("Guardar").option("disabled", true);
                return false;
            }
        }
    }

    function onFormReady(e) {
        if (isFirstLoad) {
            var moneda = vform.getEditor("Moneda").option("value");
            isFirstLoad = false;
            //var estado = vform.option("formData").Estado;
            if (moneda == "Dólares") {
                vform.getEditor("TasaCambio").option("disabled", true);
                vform.getEditor("TasaCambio").option("value", 0);
            }
            else {
                vform.getEditor("TasaCambio").option("disabled", false);
            }
            //hideCommand();
            var queryParams = new URLSearchParams(window.location.search);
            IdAsignacion = vform.getEditor("IdAsignacion").option("value");
            IdPago = vform.option("formData").IdPago;
            var param = IdAsignacion.toString() + "." + IdPago.toString();
            queryParams.set("p", param);
            // Replace current querystring with the new one.
            history.replaceState(null, null, "?" + queryParams.toString());
            //alert(queryParams);
        }
    }

    var PagoPrint = null;
    function printTicket(e) {
        PagoPrint= e.row.key;
        var popup = $("#popRecibo2").dxPopup("instance");
        popup.show();
        $("#result_Voucher_Item_popup").html('');
        $("#result_Voucher_Item_popup").load("@Url.Action("GetTicket", "Pagos")?idpago=" + PagoPrint);
    }

    function onMonedaChanged(e) {
        var moneda = e.selectedItem;
        if (!isFirstLoad) {
            if (moneda == "Dólares") {
                vform.getEditor("TasaCambio").option("disabled", true);
            }
            else {
                vform.getEditor("TasaCambio").option("disabled", false);
                vform.getEditor("TasaCambio").option("value", 0);
            }
        }

    }

    function onMesReady(e) {
        // alert(e);
    }

    function onMesChanged(e) {
        vform.getEditor("MontoPago").option("value", e.selectedItem.MontoMinimo);
        vform.getEditor("Interés").option("value", e.selectedItem.Interes);
        vform.getEditor("Mora").option("value", e.selectedItem.Mora);
        vform.getEditor("TotalPagar").option("value", e.selectedItem.MontoMinimo + e.selectedItem.Interes + e.selectedItem.Mora);
        //vform.option("formData").IdPago = 0;
    }

    function newPago() {
        window.location.href = "/Pago/Registrar/?p=" + IdAsignacion + "." + 0;
    }

    function getIdAsignacion() {
        /*var r = $("#form").dxForm("option", "formData").IdAsignacion;
        return r;*/
        IdAsignacion = vform.option("formData").IdAsignacion;
        //alert(IdAsignacion);
        return IdAsignacion;
    }

    function getIdPago() {
        /*var r = $("#form").dxForm("option", "formData").IdAsignacion;
        return r;*/
        IdPago = vform.option("formData").IdPago;
        //alert(IdPago);
        return IdPago;
    }


    function lookupExpr(item) {
        if (item != null)
            return item.NombreProyecto + " " + item.NombreLote;
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Hoja1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            // https://github.com/exceljs/exceljs#writing-xlsx
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PlandePago.xlsx');
            });
        });
        e.cancel = true;
    }
</script>